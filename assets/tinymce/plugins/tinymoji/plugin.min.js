tinymce.PluginManager.add("tinymoji", function (t, e) { t.target.DOM.loadCSS(e + "/styles.css"); var n = null; if (localStorage && "1.0" == localStorage.getItem("tinymce.plugins.tinymoji.version") && (n = localStorage.getItem("tinymce.plugins.tinymoji.html")), null == n) { var i = new XMLHttpRequest; i.overrideMimeType("application/json"), i.open("GET", e + "/emoji.json", !0), i.onreadystatechange = function () { if (4 == i.readyState && "200" == i.status) { var t = JSON.parse(i.responseText).groups; n = '<div class="tinymoji-body">', t.forEach(function (t) { n += '<table role="list" title="' + t.name + '"><tbody>'; var e = Math.min(t.emoji.length, 9), i = Math.ceil(t.emoji.length / e); for (y = 0; y < i; y++) { for (n += "<tr>", x = 0; x < e; x++) { var a = y * e + x; if (a < t.emoji.length) { var o = t.emoji[a]; n += '<td title="' + o.name + '"><a href="#" aria-label="' + o.name + '" data-mce-alt="' + o.name + '"data-mce-emoji="' + o.icon + '">' + o.icon + "</a></td>" } else n += "<td />" } n += "</tr>" } n += "</tbody></table>" }), n += "</div>", localStorage && (localStorage.setItem("tinymce.plugins.tinymoji.version", "1.0"), localStorage.setItem("tinymce.plugins.tinymoji.html", n)) } }, i.send(null) } return t.addButton("tinymoji", { type: "panelbutton", icon: "tinymoji-button", panel: { role: "application", autohide: !1, html: function () { return n }, onclick: function (e) { var n = t.dom.getParent(e.target, "a"); n && t.insertContent(n.getAttribute("data-mce-emoji")) } }, tooltip: "Emoji" }), { getMetadata: function () { return { name: "TinyMoji" } } } });